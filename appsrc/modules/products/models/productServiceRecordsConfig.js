const mongoose = require('mongoose');
const uniqueValidator = require('mongoose-unique-validator');
const { softDeletePlugin } = require('soft-delete-plugin-mongoose');
const baseSchema = require('../../../base/baseSchema');

const GUID = require('mongoose-guid')(mongoose);


const Schema = mongoose.Schema;

const docSchema = new Schema({  
  recordType: { type: String, enum: ['service','repair', 'training', 'install'], default: 'service' },
  
  machineCategory: { type: Schema.Types.ObjectId , ref: 'MachineCategory' },
  // Category information of machine
  
  machineModel: { type: Schema.Types.ObjectId , ref: 'MachineModel' },
  // Model information of machine

  status: { type: String, enum: ['DRAFT','SUBMITTED', 'APPROVED'], default: 'DRAFT' },
  // draft/submitted/approved

  parentConfig: { type: Schema.Types.ObjectId , ref: 'MachineServiceRecordConfig' },
  // last configuration version.  if there is any
  
  docTitle: { type: String },
  // name/title of document/screen

  docVersionNo: { type: Number,  required: true,  default: '1'},
  // versionNo should be incremented by 1 when an approved config will be copies to draft 
  // for modification.

  
  textBeforeCheckItems: { type: String },
  // display this text before fields  
  
  // checkItemLists : [{
  //   ListTitle: { type: String },
  //   checkItems : [{type: Schema.Types.ObjectId , ref: 'MachineCheckItem'}],
  // }],

  checkItemLists : [{
    // Globally unique identifier generated by mongoDB
    ListTitle: { type: String },
    checkItems : [{type: Schema.Types.ObjectId , ref: 'MachineServiceCheckItem'}],
  }],

  
  textAfterCheckItems: { type: String },
  // display this text before fields
  
  isOperatorSignatureRequired: { type: Boolean, default: false},
  // true if operator signature is required
  
  enableNote: { type: Boolean, default: false},
  // enable Service Note at input screen
  
  enableMaintenanceRecommendations: { type: Boolean, default: false},
  // enable Maintenance Recommendations at input screen
  
  enableSuggestedSpares: { type: Boolean, default: false},
  // enable Suggested Spares at input screen
  
  header: {
    type: {type: String, default: 'text'},
    // it can be text or image. default is text
    leftText: {type: String},
    centerText: {type: String},
    rightText: {type: String}
    // for page number, use value pgNo.
  },
  footer: {
    type: {type: String, default: 'text'},
    // it can be text or image. default is text
    leftText: {type: String},
    centerText: {type: String},
    rightText: {type: String}
    // for page number, use value pgNo. 
  },

  NoOfApprovalsRequired: { type: Number, required: true,  default: '1' },
  // Number of approvals required
  
  Approvals:[{
    approvedBy: { type: Schema.Types.ObjectId , ref: 'SecurityUser' },
    // user who will approve this document
    approvedFrom: {type: String},
    //user ip address
    approvedDate: { type: Date, default: Date.now }
    // date of Approval
  }]

},


{
    collection: 'MachineServiceRecordConfigs'
});
docSchema.set('timestamps', true);
docSchema.add(baseSchema.docVisibilitySchema);
docSchema.add(baseSchema.docAuditSchema);

docSchema.plugin(uniqueValidator);

docSchema.index({"recordType":1})
docSchema.index({"isActive":1})
docSchema.index({"isArchived":1})

module.exports = mongoose.model('MachineServiceRecordConfig', docSchema);
